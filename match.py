import pandas as pd
from rapidfuzz import fuzz

# import Software dataset and CVE dataset
software_dataframe = pd.read_csv('software.csv')
cve_dataframe = pd.read_csv('cves.csv')

# iterating over CVE dataset to match with software name and version
for index, row in cve_dataframe.iterrows():
    cve_name = str(row[2])  # extract CVE name
    versions = str(row[3]).split(',')  # extract CVE version list

    # iterating over Software dataset
    for idx, rec in software_dataframe.iterrows():
        software_name = str(rec[0]).lower()  # extract software name (in lower words to match correctly with the CVE's)
        soft_version = str(rec[1])  # extract software version

        # Suppose there's a software name like "Microsoft Office Word"
        # In this situation, in terms of matching accuracy, we have to get rid of "Microsoft" or whatever
        # We split those words from the left (extracting words after first space) and check its string similarity rate
        if (' ' in software_name):
            word_after_space = software_name.split(' ', 1)[1]  # when there is one space in the name (Microsoft Word)
            # If string similarity rate of the words (software name and cve name) >= 85%
            if round(fuzz.ratio(cve_name, word_after_space)) >= 85:
                # Match occurrences and count them. Write the total to its column.
                if soft_version in versions: software_dataframe.loc[idx, ['CVEs']] = [rec[2] + 1]
            else:
                if len(software_name.split(' ', 2)) > 2:  # when there is two spaces in the name (Microsoft office Word)
                    # If string similarity rate of the words (software name and cve name) >= 90%
                    if round(fuzz.ratio(cve_name, software_name.split(' ', 2)[2])) >= 90:
                        # Match occurrences and count them. Write the total to its column.
                        if soft_version in versions: software_dataframe.loc[idx, ['CVEs']] = [rec[2] + 1]
        else:  # when there is not any space in the name
            # If string similarity rate of the words (software name and cve name) >= 90%
            if round(fuzz.ratio(cve_name, software_name)) >= 80:
                # Match occurrences and count them. Write the total to its column.
                if soft_version in versions: software_dataframe.loc[idx, ['CVEs']] = [rec[2] + 1]

software_dataframe.to_csv('software.csv', index=False)
